// MIT License

// Copyright (c) 2021 NedMakesGames

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main

// This describes a vertex on the source mesh
struct SourceVertex {
    float3 positionOS;
    float3 normalOS;
    float2 uv;
};
// Source buffers, arranged as a vertex buffer and index buffer
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceIndices;

// This describes a vertex on the generated mesh
struct GeneratedVertex {
    float3 positionOS;
    float3 normalOS;
    float4 uvAndHeight;
};
// Source and index buffers for the generated mesh
RWStructuredBuffer<GeneratedVertex> _GeneratedVertices;
RWStructuredBuffer<int> _GeneratedIndices;

int _NumSourceTriangles;
int _NumSourceVertices;
float4x4 _Transform;
float4x4 _NormalTransform;
int _NumGrassLayers;
float _GrassHeight;

// Apply the _Transform matrix
SourceVertex Transform(SourceVertex v) {
    SourceVertex o;
    o.positionOS = mul(_Transform, float4(v.positionOS, 1)).xyz;
    o.normalOS = normalize(mul(_NormalTransform, float4(v.normalOS,0)).xyz);
    o.uv = v.uv;
    return o;
}


// Create a generated vertex
GeneratedVertex MakeGeneratedVertex(SourceVertex source, float clipPercent, float heightPercent) {
    GeneratedVertex o;
    o.positionOS = source.positionOS + source.normalOS * (heightPercent * _GrassHeight);
    o.normalOS = source.normalOS;
    o.uvAndHeight = float4(source.uv, clipPercent, heightPercent);
    return o;
}


// This is the number of threads to create per dispatch. This kernel only uses the
// x value, so you can fine tune that if needed
[numthreads(128, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    // Disptaches can only be in chunks of 128, there might be more threads than number
    // of triangles. Return in that case
    if ((int)id.x >= _NumSourceTriangles) {
        return;
    }

    // Get the vertices which make up this triangle
    // The index array contains indices into the vertex array
    // Three values in the index array describe one triangle in the source mesh
    int sourceTriStart = id.x * 3;
    SourceVertex vertices[3];

    [unroll]
    for(int i= 0;i<3;i++)
    {
        vertices[i] = Transform(_SourceVertices[_SourceIndices[sourceTriStart+i]]);
    }

    for(int layer = 0;layer < _NumGrassLayers ; layer++)
    {
        float clipPerc = (float) layer / (float) _NumGrassLayers;
        float heightPerc = (float) layer / (float) (_NumGrassLayers-1);

        int layerVertexOffset = _NumSourceVertices * layer;
        int layerIndexOffset = _NumSourceTriangles * 3* layer;
    
        [unroll]
        for(int i= 0;i<3;i++)
        {
            int sourceIndexPosition = sourceTriStart + i;
            int genVertexPosition = layerVertexOffset + _SourceIndices[sourceIndexPosition];
            _GeneratedIndices[layerIndexOffset + sourceIndexPosition] = genVertexPosition;
            _GeneratedVertices[genVertexPosition] = MakeGeneratedVertex(vertices[i], clipPerc, heightPerc);

            
        }
    }
}
